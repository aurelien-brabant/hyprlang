
# Test comment
## This is also a comment
 ## This is a comment with space as a first character
	## This is a comment with tab as a first character
  	  	## This is a comment with leading spaces and tabs
 ##### Comment with more hash tags

testInt = 123
testFloat = 123.456
testString = Hello World! ## This is not a comment! # This is!

$MY_VAR = 1337
$MY_VAR_2 = $MY_VAR
testVar = $MY_VAR$MY_VAR_2

testEnv = $SHELL

source = ./colors.conf

customType = abc

testStringColon = ee:ee:ee

# hyprlang noerror true

errorVariable = true

# hyprlang noerror false

testCategory {
    testValueInt = 123456
    testValueHex = 0xF

    testColor1   = rgb(255, 255, 255)
    testColor2   = rgba(0,   0,   0,   1.0)
    testColor3   = rgba(ffeeff22)

    nested1 {
        testValueNest = 1
        nested2 {
            testValueNest = 1
        }
    }
}

$SPECIALVAL1 = 1

special {
    key = a
    value = $SPECIALVAL1
}

special[b] {
    value = 2
}

specialGeneric {
    one {
        value = 1
        copyTest = 2
    }

    two {
        value = 2
        nonexistent = abc
    }
}

specialAnonymous {
    value = 2
}

specialAnonymous {
    value = 3
}

flagsStuff {
    value = 2
}


# '\' POSIX shell-like multiline syntax
# Leading spaces are preserved while trailing spaces and linebreaks are discarded
multilineSimple = I use C++ because \
    I hate Java

multilineTrim = I use Javascript because    \ # Spaces should be trimmed before and after the delimiter
    I hate Python          # here also.

multilineVar = $SPECIALVAL1	\
 $SPECIALVAL1				\
  $SPECIALVAL1				\
   $SPECIALVAL1

$NAME = multiline

multilineBreakWord = Hello $NAME, how are you to\
day?

multilineMultiBreakWord = oui   \
 oui                            \
 b                              \
a                               \
g                               \
u                               \
e                               \
t                               \
t                               \
e

# Another syntax for multiline.
# Ignores leading and trailing whitespaces. Linebreaks are turned into spaces. 

multilineCategory {
    indentedMultiline = Hello                           >
                        world                           >
                        this is another syntax for      >
                        multiline that trims all spaces

    multilineUneven = Hello                           >
        world                           >
            this is another syntax for      >
                multiline that trims all spaces
}

testCategory:testValueHex = 0xFFfFaAbB

$RECURSIVE1 = a
$RECURSIVE2 = $RECURSIVE1b
testStringRecursive = $RECURSIVE2c

testStringQuotes = "Hello World!"
#testDefault = 123

doABarrelRoll = woohoo, some, params # Funny!
flagsabc = test
#doSomethingFunny = 1, 2, 3, 4 # Funnier!
#testSpaces =                abc                             ,                                  def                                  # many spaces, should be trimmed

